#include <vector>
#include <string.h>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class UnsealTheSafe {
public:
  vector<int> vec[10];
  void init() {
    for (int i = 1; i < 10; ++i) { // right
      if(i % 3 == 0)
        continue;
      vec[i].push_back(i+1);
    }
    for (int i = 1; i < 7; ++i) // down
      vec[i].push_back(i + 3);
    vec[7].push_back(0);
    for (int i = 4; i < 10; ++i) // up
      vec[i].push_back(i - 3);
    vec[0].push_back(7);
    for (int i = 2; i < 10; ++i) {
      if(i == 4 || i == 7)
        continue;
      vec[i].push_back(i-1);
    }
  }
  long long mem[10][31];
  long long DP(int x, int cnt) {
    if(cnt == 0)
      return 1;
    long long& ret = mem[x][cnt];
    if(~ret)
      return ret;
    ret = 0;
    for(int it: vec[x])
      ret += DP(it, cnt - 1);
    return ret;
  }
	long long countPasswords(int N) {
	  init();
	  memset(mem, -1, sizeof(mem));
	  long long ans = 0;
	  for (int i = 0; i < 10; ++i)
	    ans += DP(i, N - 1);
	  return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	UnsealTheSafe *obj;
	long long answer;
	obj = new UnsealTheSafe();
	clock_t startTime = clock();
	answer = obj->countPasswords(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	long long p1;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 26ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 74ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 25;
	p1 = 768478331222ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

