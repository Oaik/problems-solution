#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

using namespace std;

class CageTheMonster {
 public:

  int best = 1600, n, m, dx[4] = { 0, 0, 1, -1 }, dy[4] = { 1, -1, 0, 0 };
  bool row[41], col[41];
  int vis[41][41];
  char arr[41][41];
  int vid = 0;

  int countbits(int num) {
    int res = 0;
    for (int i = 0; i < 4; ++i)
      res += (num & (1 << i)) > 0;
    return res;
  }

  bool valid(int x, int y) {
    return (x >= 0 && x < n) && (y >= 0 && y < m);
  }

  bool dfs(int x, int y) {
    if (!valid(x, y))
      return 0;
    if (row[x] || col[y] || arr[x][y] == '#')
      return 1;
    if(vis[x][y] == vid)
      return 1;
    vis[x][y] = vid;
    int can = 1;
    for (int i = 0; i < 4; ++i) {
      int nx = x + dx[i], ny = y + dy[i];
      can &= dfs(nx, ny);
    }
    return can;
  }

  void backtrack(int x, int y, int kam, int used) {
    if (kam == 4) {
      ++vid;
      if (dfs(x, y))
        best = min(best, countbits(used));
      return;
    }
    for (int i = 0; i < 4; ++i) {
      if (i == 0) {
        if (x > 0) {
          if(!(used & (1 << i))) {
            row[x - 1] = 1;
            backtrack(x, y, kam + 1, used | (1 << i));
            row[x - 1] = 0;
          } else {
            backtrack(x, y, kam + 1, used);
          }
        }
        continue;
      }
      if (i == 1) {
        if (x + 1 < n) {
          if(!(used & (1 << i))) {
            row[x + 1] = 1;
            backtrack(x, y, kam + 1, used | (1 << i));
            row[x + 1] = 0;
          } else {
            backtrack(x, y, kam + 1, used);
          }
        }
        continue;
      }
      if (i == 2) {
        if (y > 0) {
          if(!(used & (1 << i))) {
            col[y - 1] = 1;
            backtrack(x, y, kam + 1, used | (1 << i));
            col[y - 1] = 0;
          } else {
            backtrack(x, y, kam + 1, used);
          }
        }
        continue;
      }
      if(i == 3) {
        if (y + 1 < m) {
          if(!(used & (1 << i))) {
            col[y + 1] = 1;
            backtrack(x, y, kam + 1, used | (1 << i));
            col[y + 1] = 0;
          } else {
            backtrack(x, y, kam + 1, used);
          }
        }
        continue;
      }
    }
  }

  int capture(vector<string> labyrinth) {
    n = labyrinth.size();
    vector<pair<int, int>> vec;
    for (int i = 0; i < n; ++i) {
      m = labyrinth[i].size();
      for (int j = 0; j < m; ++j) {
        arr[i][j] = labyrinth[i][j];
        if(arr[i][j] == '^')
          vec.push_back({i, j});
      }
    }
    for(auto it: vec) {
      ++vid;
      if (dfs(it.first, it.second))
        best = min(best, 0);
      if(best == 0)
        break;
      backtrack(it.first, it.second, 0, 0);
    }
    if(best == 1600)
      best = -1;
    return best;
  }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CageTheMonster *obj;
	int answer;
	obj = new CageTheMonster();
	clock_t startTime = clock();
	answer = obj->capture(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {".######..",".#^^^^#..",".#^^^^#..",".#^^^^#..",".##^^##..","...^^...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {".....",".^#^.",".#^#.","..#.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"#....","^#...","#...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"..........","..........","....^.....","..........","..........","..........",".........."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"#############.############","#############.############","#############.############","#############.############",".............^............","#############.############","#############.############","#############.############"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {".^^#^.^...^.^..^^.....^.....^..^^.^",".....^^..^.....^....^...^.^...^^..^","^.^^...^...^.^..^^^..^....^...^.^^^","..^^.........^^.^...........^^..^^.","^...^...^^.^..^..^^..^^^....^......",".^.^..........^^..^...^..^.......^.",".^.^^..^.^^...^^^...^^..^......^^..","...^.......^^#^..^.#..^........^.^.","..^..^...#^^..^......^.^...........","^^.^^..^.^.....^.^.....^....^.^....",".........^.^..^..^.^^.......^...^^.","^...^...^........^.^...^...........","^^^.^^.........^^..^.^^......^^..^.",".^........^.^.^...^...#^..^^.^....^","...^...^....^.....^^....^..^....^^.","..^..^..^^.^.^.^^^^.^.^..^..^^..^.^",".^^^.^.........^....^.^....^.^.^.^^","^.^...^....#^.....^^^....^^..^^^...","..........^..#...^.............^^..","...^.^^....^.....^^..^....^^^.^....","...^^^......^.^..^.........^^......","^...^.^.^...^..^....^.^..^......^.^"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

